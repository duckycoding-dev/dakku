import { z } from 'zod';

// String union types for categorization labels
const Dialects = [
  'Brazilian',
  'Hokkaido-ben',
  'Kansai-ben',
  'Kantou-ben',
  'Kyoto-ben',
  'Kyuushuu-ben',
  'Nagano-ben',
  'Osaka-ben',
  'Ryuukyuu-ben',
  'Touhoku-ben',
  'Tosa-ben',
  'Tsugaru-ben',
] as const;
export type Dialect = (typeof Dialects)[number];

const Fields = [
  'agriculture',
  'anatomy',
  'archeology',
  'architecture',
  'art, aesthetics',
  'astronomy',
  'audiovisual',
  'aviation',
  'baseball',
  'biochemistry',
  'biology',
  'botany',
  'boxing',
  'Buddhism',
  'business',
  'card games',
  'chemistry',
  'Chinese mythology',
  'Christianity',
  'civil engineering',
  'clothing',
  'computing',
  'crystallography',
  'dentistry',
  'ecology',
  'economics',
  'electricity, elec. eng.',
  'electronics',
  'embryology',
  'engineering',
  'entomology',
  'figure skating',
  'film',
  'finance',
  'fishing',
  'food, cooking',
  'gardening, horticulture',
  'genetics',
  'geography',
  'geology',
  'geometry',
  'go (game)',
  'golf',
  'grammar',
  'Greek mythology',
  'hanafuda',
  'horse racing',
  'Internet',
  'Japanese mythology',
  'kabuki',
  'law',
  'linguistics',
  'logic',
  'martial arts',
  'mahjong',
  'manga',
  'mathematics',
  'mechanical engineering',
  'medicine',
  'meteorology',
  'military',
  'mineralogy',
  'mining',
  'motorsport',
  'music',
  'noh',
  'ornithology',
  'paleontology',
  'pathology',
  'pharmacology',
  'philosophy',
  'photography',
  'physics',
  'physiology',
  'politics',
  'printing',
  'professional wrestling',
  'psychiatry',
  'psychoanalysis',
  'psychology',
  'railway',
  'Roman mythology',
  'Shinto',
  'shogi',
  'skiing',
  'sports',
  'statistics',
  'stock market',
  'sumo',
  'surgery',
  'telecommunications',
  'trademark',
  'television',
  'veterinary terms',
  'video games',
  'zoology',
] as const;
export type Field = (typeof Fields)[number];

const KanjiInfos = [
  'ateji (phonetic) reading',
  'word containing irregular kana usage',
  'word containing irregular kanji usage',
  'irregular okurigana usage',
  'word containing out-dated kanji or kanji usage',
  'rarely used kanji form',
  'search-only kanji form',
] as const;
export type KanjiInfo = (typeof KanjiInfos)[number];

const MiscInfos = [
  'abbreviation',
  'archaic',
  'character',
  "children's language",
  'colloquial',
  'company name',
  'creature',
  'dated term',
  'deity',
  'derogatory',
  'document',
  'euphemistic',
  'event',
  'familiar language',
  'female term or language',
  'fiction',
  'formal or literary term',
  'given name or forename, gender not specified',
  'group',
  'historical term',
  'honorific or respectful (sonkeigo) language',
  'humble (kenjougo) language',
  'idiomatic expression',
  'jocular, humorous term',
  'legend',
  'manga slang',
  'male term or language',
  'mythology',
  'Internet slang',
  'object',
  'obsolete term',
  'onomatopoeic or mimetic word',
  'organization name',
  'other',
  'full name of a particular person',
  'place name',
  'poetical term',
  'polite (teineigo) language',
  'product name',
  'proverb',
  'quotation',
  'rare term',
  'religion',
  'sensitive',
  'service',
  'ship name',
  'slang',
  'railway station',
  'family or surname',
  'word usually written using kana alone',
  'unclassified name',
  'vulgar expression or word',
  'work of art, literature, music, etc. name',
  'rude or X-rated term (not displayed in educational software)',
  'yojijukugo',
] as const;
export type MiscInfo = (typeof MiscInfos)[number];

const PartsOfSpeech = [
  'noun or verb acting prenominally',
  'adjective (keiyoushi)',
  'adjective (keiyoushi) - yoi/ii class',
  "'kari' adjective (archaic)",
  "'ku' adjective (archaic)",
  'adjectival nouns or quasi-adjectives (keiyodoshi)',
  'archaic/formal form of na-adjective',
  "nouns which may take the genitive case particle 'no'",
  'pre-noun adjectival (rentaishi)',
  "'shiku' adjective (archaic)",
  "'taru' adjective",
  'adverb (fukushi)',
  "adverb taking the 'to' particle",
  'auxiliary',
  'auxiliary adjective',
  'auxiliary verb',
  'conjunction',
  'copula',
  'counter',
  'expressions (phrases, clauses, etc.)',
  'interjection (kandoushi)',
  'noun (common) (futsuumeishi)',
  'adverbial noun (fukushitekimeishi)',
  'proper noun',
  'noun, used as a prefix',
  'noun, used as a suffix',
  'noun (temporal) (jisoumeishi)',
  'numeric',
  'pronoun',
  'prefix',
  'particle',
  'suffix',
  'unclassified',
  'verb unspecified',
  'Ichidan verb',
  'Ichidan verb - kureru special class',
  "Nidan verb with 'u' ending (archaic)",
  "Nidan verb (upper class) with 'bu' ending (archaic)",
  "Nidan verb (lower class) with 'bu' ending (archaic)",
  "Nidan verb (upper class) with 'dzu' ending (archaic)",
  "Nidan verb (lower class) with 'dzu' ending (archaic)",
  "Nidan verb (upper class) with 'gu' ending (archaic)",
  "Nidan verb (lower class) with 'gu' ending (archaic)",
  "Nidan verb (upper class) with 'hu/fu' ending (archaic)",
  "Nidan verb (lower class) with 'hu/fu' ending (archaic)",
  "Nidan verb (upper class) with 'ku' ending (archaic)",
  "Nidan verb (lower class) with 'ku' ending (archaic)",
  "Nidan verb (upper class) with 'mu' ending (archaic)",
  "Nidan verb (lower class) with 'mu' ending (archaic)",
  "Nidan verb (lower class) with 'nu' ending (archaic)",
  "Nidan verb (upper class) with 'ru' ending (archaic)",
  "Nidan verb (lower class) with 'ru' ending (archaic)",
  "Nidan verb (lower class) with 'su' ending (archaic)",
  "Nidan verb (upper class) with 'tsu' ending (archaic)",
  "Nidan verb (lower class) with 'tsu' ending (archaic)",
  "Nidan verb (lower class) with 'u' ending and 'we' conjugation(archaic)",
  "Nidan verb (upper class) with 'yu' ending (archaic)",
  "Nidan verb (lower class) with 'yu' ending (archaic)",
  "Nidan verb (lower class) with 'zu' ending (archaic)",
  "Yodan verb with 'bu' ending (archaic)",
  "Yodan verb with 'gu' ending (archaic)",
  "Yodan verb with 'hu/fu' ending (archaic)",
  "Yodan verb with 'ku' ending (archaic)",
  "Yodan verb with 'mu' ending (archaic)",
  "Yodan verb with 'nu' ending (archaic)",
  "Yodan verb with 'ru' ending (archaic)",
  "Yodan verb with 'su' ending (archaic)",
  "Yodan verb with 'tsu' ending (archaic)",
  'Godan verb - -aru special class',
  "Godan verb with 'bu' ending",
  "Godan verb with 'gu' ending",
  "Godan verb with 'ku' ending",
  'Godan verb - Iku/Yuku special class',
  "Godan verb with 'mu' ending",
  "Godan verb with 'nu' ending",
  "Godan verb with 'ru' ending",
  "Godan verb with 'ru' ending (irregular verb)",
  "Godan verb with 'su' ending",
  "Godan verb with 'tsu' ending",
  "Godan verb with 'u' ending",
  "Godan verb with 'u' ending (special class)",
  'Godan verb - Uru old class verb (old form of Eru)',
  'intransitive verb',
  'Kuru verb - special class',
  'irregular nu verb',
  'irregular ru verb, plain form ends with -ri',
  'noun or participle which takes the aux. verb suru',
  'su verb - precursor to the modern suru',
  'suru verb - included',
  'suru verb - special class',
  'transitive verb',
  'Ichidan verb - zuru verb (alternative form of -jiru verbs)',
] as const;
export type PartOfSpeech = (typeof PartsOfSpeech)[number];

const ReadingInfos = [
  'gikun (meaning as reading) or jukujikun (special kanji reading)',
  'word containing irregular kana usage',
  'out-dated or obsolete kana usage',
  'rarely used kana form',
  'search-only kana form',
] as const;
export type ReadingInfo = (typeof ReadingInfos)[number];

const Priorities = [
  'news1', // News priority 1
  'news2', // News priority 2
  'ichi1', // Ichimango priority 1
  'ichi2', // Ichimango priority 2
  'spec1', // Special priority 1
  'spec2', // Special priority 2
  'gai1', // Gai priority 1
  'gai2', // Gai priority 2
  'nf01',
  'nf02',
  'nf03',
  'nf04',
  'nf05',
  'nf06',
  'nf07',
  'nf08',
  'nf09',
  'nf10',
  'nf11',
  'nf12',
  'nf13',
  'nf14',
  'nf15',
  'nf16',
  'nf17',
  'nf18',
  'nf19',
  'nf20',
  'nf21',
  'nf22',
  'nf23',
  'nf24',
  'nf25',
  'nf26',
  'nf27',
  'nf28',
  'nf29',
  'nf30',
  'nf31',
  'nf32',
  'nf33',
  'nf34',
  'nf35',
  'nf36',
  'nf37',
  'nf38',
  'nf39',
  'nf40',
  'nf41',
  'nf42',
  'nf43',
  'nf44',
  'nf45',
  'nf46',
  'nf47',
  'nf48',
] as const;

export type Priority = (typeof Priorities)[number];

// Additional types inferred from JMdict_e.xml and database schema

export type Gloss = {
  text: string;
  lang?: string;
  gender?: string;
  type?: 'lit' | 'fig' | 'expl';
};

export type LoanwordSource = {
  originalWordOrSentence?: string;
  originalLang?: string;
  type?: 'full' | 'part';
  waseieigo?: boolean;
};

export type Sense = {
  glosses: Gloss[];
  partsOfSpeech: PartOfSpeech[];
  fields: Field[];
  miscs: MiscInfo[];
  dialects: Dialect[];
  infos: string[];
  loanwordSources: LoanwordSource[];
  stagk: string[];
  stagr: string[];
  xrefs: string[];
  antonyms?: string[];
};

export type KanjiTag = PartOfSpeech | Field | MiscInfo;

export type KanjiElement = {
  text: string;
  infos: KanjiInfo[];
  priorities: Priority[];
};

export type ReadingElement = {
  text: string;
  noKanji: boolean;
  restrictions: string[];
  infos: ReadingInfo[];
  priorities: Priority[];
};

export type VocabularyForImport = {
  id: number;
  kanji: KanjiElement[];
  readings: ReadingElement[];
  senses: Sense[];
  tags: KanjiTag[];
  priorities: Priority[];
};

const DialectSchema = z.enum([
  'Brazilian',
  'Hokkaido-ben',
  'Kansai-ben',
  'Kantou-ben',
  'Kyoto-ben',
  'Kyuushuu-ben',
  'Nagano-ben',
  'Osaka-ben',
  'Ryuukyuu-ben',
  'Touhoku-ben',
  'Tosa-ben',
  'Tsugaru-ben',
]);

const FieldSchema = z.enum([
  'agriculture',
  'anatomy',
  'archeology',
  'architecture',
  'art, aesthetics',
  'astronomy',
  'audiovisual',
  'aviation',
  'baseball',
  'biochemistry',
  'biology',
  'botany',
  'boxing',
  'Buddhism',
  'business',
  'card games',
  'chemistry',
  'Chinese mythology',
  'Christianity',
  'civil engineering',
  'clothing',
  'computing',
  'crystallography',
  'dentistry',
  'ecology',
  'economics',
  'electricity, elec. eng.',
  'electronics',
  'embryology',
  'engineering',
  'entomology',
  'figure skating',
  'film',
  'finance',
  'fishing',
  'food, cooking',
  'gardening, horticulture',
  'genetics',
  'geography',
  'geology',
  'geometry',
  'go (game)',
  'golf',
  'grammar',
  'Greek mythology',
  'hanafuda',
  'horse racing',
  'Internet',
  'Japanese mythology',
  'kabuki',
  'law',
  'linguistics',
  'logic',
  'martial arts',
  'mahjong',
  'manga',
  'mathematics',
  'mechanical engineering',
  'medicine',
  'meteorology',
  'military',
  'mineralogy',
  'mining',
  'motorsport',
  'music',
  'noh',
  'ornithology',
  'paleontology',
  'pathology',
  'pharmacology',
  'philosophy',
  'photography',
  'physics',
  'physiology',
  'politics',
  'printing',
  'professional wrestling',
  'psychiatry',
  'psychoanalysis',
  'psychology',
  'railway',
  'Roman mythology',
  'Shinto',
  'shogi',
  'skiing',
  'sports',
  'statistics',
  'stock market',
  'sumo',
  'surgery',
  'telecommunications',
  'trademark',
  'television',
  'veterinary terms',
  'video games',
  'zoology',
]);

const KanjiInfoSchema = z.enum([
  'ateji (phonetic) reading',
  'word containing irregular kana usage',
  'word containing irregular kanji usage',
  'irregular okurigana usage',
  'word containing out-dated kanji or kanji usage',
  'rarely used kanji form',
  'search-only kanji form',
]);

const MiscInfoSchema = z.enum([
  'abbreviation',
  'archaic',
  'character',
  "children's language",
  'colloquial',
  'company name',
  'creature',
  'dated term',
  'deity',
  'derogatory',
  'document',
  'euphemistic',
  'event',
  'familiar language',
  'female term or language',
  'fiction',
  'formal or literary term',
  'given name or forename, gender not specified',
  'group',
  'historical term',
  'honorific or respectful (sonkeigo) language',
  'humble (kenjougo) language',
  'idiomatic expression',
  'jocular, humorous term',
  'legend',
  'manga slang',
  'male term or language',
  'mythology',
  'Internet slang',
  'object',
  'obsolete term',
  'onomatopoeic or mimetic word',
  'organization name',
  'other',
  'full name of a particular person',
  'place name',
  'poetical term',
  'polite (teineigo) language',
  'product name',
  'proverb',
  'quotation',
  'rare term',
  'religion',
  'sensitive',
  'service',
  'ship name',
  'slang',
  'railway station',
  'family or surname',
  'word usually written using kana alone',
  'unclassified name',
  'vulgar expression or word',
  'work of art, literature, music, etc. name',
  'rude or X-rated term (not displayed in educational software)',
  'yojijukugo',
]);

const PartOfSpeechSchema = z.enum([
  'noun or verb acting prenominally',
  'adjective (keiyoushi)',
  'adjective (keiyoushi) - yoi/ii class',
  "'kari' adjective (archaic)",
  "'ku' adjective (archaic)",
  'adjectival nouns or quasi-adjectives (keiyodoshi)',
  'archaic/formal form of na-adjective',
  "nouns which may take the genitive case particle 'no'",
  'pre-noun adjectival (rentaishi)',
  "'shiku' adjective (archaic)",
  "'taru' adjective",
  'adverb (fukushi)',
  "adverb taking the 'to' particle",
  'auxiliary',
  'auxiliary adjective',
  'auxiliary verb',
  'conjunction',
  'copula',
  'counter',
  'expressions (phrases, clauses, etc.)',
  'interjection (kandoushi)',
  'noun (common) (futsuumeishi)',
  'adverbial noun (fukushitekimeishi)',
  'proper noun',
  'noun, used as a prefix',
  'noun, used as a suffix',
  'noun (temporal) (jisoumeishi)',
  'numeric',
  'pronoun',
  'prefix',
  'particle',
  'suffix',
  'unclassified',
  'verb unspecified',
  'Ichidan verb',
  'Ichidan verb - kureru special class',
  "Nidan verb with 'u' ending (archaic)",
  "Nidan verb (upper class) with 'bu' ending (archaic)",
  "Nidan verb (lower class) with 'bu' ending (archaic)",
  "Nidan verb (upper class) with 'dzu' ending (archaic)",
  "Nidan verb (lower class) with 'dzu' ending (archaic)",
  "Nidan verb (upper class) with 'gu' ending (archaic)",
  "Nidan verb (lower class) with 'gu' ending (archaic)",
  "Nidan verb (upper class) with 'hu/fu' ending (archaic)",
  "Nidan verb (lower class) with 'hu/fu' ending (archaic)",
  "Nidan verb (upper class) with 'ku' ending (archaic)",
  "Nidan verb (lower class) with 'ku' ending (archaic)",
  "Nidan verb (upper class) with 'mu' ending (archaic)",
  "Nidan verb (lower class) with 'mu' ending (archaic)",
  "Nidan verb (lower class) with 'nu' ending (archaic)",
  "Nidan verb (upper class) with 'ru' ending (archaic)",
  "Nidan verb (lower class) with 'ru' ending (archaic)",
  "Nidan verb (lower class) with 'su' ending (archaic)",
  "Nidan verb (upper class) with 'tsu' ending (archaic)",
  "Nidan verb (lower class) with 'tsu' ending (archaic)",
  "Nidan verb (lower class) with 'u' ending and 'we' conjugation(archaic)",
  "Nidan verb (upper class) with 'yu' ending (archaic)",
  "Nidan verb (lower class) with 'yu' ending (archaic)",
  "Nidan verb (lower class) with 'zu' ending (archaic)",
  "Yodan verb with 'bu' ending (archaic)",
  "Yodan verb with 'gu' ending (archaic)",
  "Yodan verb with 'hu/fu' ending (archaic)",
  "Yodan verb with 'ku' ending (archaic)",
  "Yodan verb with 'mu' ending (archaic)",
  "Yodan verb with 'nu' ending (archaic)",
  "Yodan verb with 'ru' ending (archaic)",
  "Yodan verb with 'su' ending (archaic)",
  "Yodan verb with 'tsu' ending (archaic)",
  'Godan verb - -aru special class',
  "Godan verb with 'bu' ending",
  "Godan verb with 'gu' ending",
  "Godan verb with 'ku' ending",
  'Godan verb - Iku/Yuku special class',
  "Godan verb with 'mu' ending",
  "Godan verb with 'nu' ending",
  "Godan verb with 'ru' ending",
  "Godan verb with 'ru' ending (irregular verb)",
  "Godan verb with 'su' ending",
  "Godan verb with 'tsu' ending",
  "Godan verb with 'u' ending",
  "Godan verb with 'u' ending (special class)",
  'Godan verb - Uru old class verb (old form of Eru)',
  'intransitive verb',
  'Kuru verb - special class',
  'irregular nu verb',
  'irregular ru verb, plain form ends with -ri',
  'noun or participle which takes the aux. verb suru',
  'su verb - precursor to the modern suru',
  'suru verb - included',
  'suru verb - special class',
  'transitive verb',
  'Ichidan verb - zuru verb (alternative form of -jiru verbs)',
]);

const ReadingInfoSchema = z.enum([
  'gikun (meaning as reading) or jukujikun (special kanji reading)',
  'word containing irregular kana usage',
  'out-dated or obsolete kana usage',
  'rarely used kana form',
  'search-only kana form',
]);

const PrioritySchema = z
  .enum(['news1', 'news2', 'ichi1', 'ichi2', 'spec1', 'spec2', 'gai1', 'gai2'])
  .or(z.string().regex(/^nf\d+$/));

const GlossSchema = z.object({
  text: z.string(),
  lang: z.string().optional(),
  gender: z.string().optional(),
  type: z.enum(['lit', 'fig', 'expl']).optional(),
});

const LoanwordSourceSchema = z.object({
  originalWordOrSentence: z.string().optional(),
  originalLang: z.string().optional(),
  type: z.enum(['full', 'part']).optional(),
  waseieigo: z.boolean().optional(),
});

const SenseSchema = z.object({
  glosses: z.array(GlossSchema),
  partsOfSpeech: z.array(PartOfSpeechSchema),
  fields: z.array(FieldSchema),
  miscs: z.array(MiscInfoSchema),
  dialects: z.array(DialectSchema),
  infos: z.array(z.string()),
  loanwordSources: z.array(LoanwordSourceSchema),
  stagk: z.array(z.string()),
  stagr: z.array(z.string()),
  xrefs: z.array(z.string()),
  antonyms: z.array(z.string()).optional(),
});

const KanjiElementSchema = z.object({
  text: z.string(),
  infos: z.array(KanjiInfoSchema),
  priorities: z.array(PrioritySchema),
});

const ReadingElementSchema = z.object({
  text: z.string(),
  noKanji: z.boolean(),
  restrictions: z.array(z.string()),
  infos: z.array(ReadingInfoSchema),
  priorities: z.array(PrioritySchema),
});

const VocabularySchema = z.object({
  id: z.number(),
  kanji: z.array(KanjiElementSchema).optional(),
  readings: z.array(ReadingElementSchema),
  senses: z.array(SenseSchema),
  tags: z.array(z.union([PartOfSpeechSchema, FieldSchema, MiscInfoSchema])),
  priorities: z.array(PrioritySchema),
});

export {
  Dialects,
  Fields,
  KanjiInfos,
  MiscInfos,
  PartsOfSpeech,
  ReadingInfos,
  Priorities,
  DialectSchema,
  FieldSchema,
  KanjiInfoSchema,
  MiscInfoSchema,
  PartOfSpeechSchema,
  ReadingInfoSchema,
  PrioritySchema,
  GlossSchema,
  LoanwordSourceSchema,
  SenseSchema,
  KanjiElementSchema,
  ReadingElementSchema,
  VocabularySchema,
};
